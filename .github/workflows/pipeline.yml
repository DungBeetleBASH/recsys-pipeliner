name: Pipeline

on: 
  push:
  pull_request:
    branches: [main]

jobs:
  test:
    name: Pytest
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Install dependencies
      run: uv sync --extra testing

    - name: Test with pytest
      run: uv run pytest

  check_for_changes:
    name: Check for package changes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    outputs:
      has_changes: ${{ steps.check_files.outputs.has_changes }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check for changes
      id: check_files
      run: |
        NUM_FILES=$(git diff --name-only HEAD^ HEAD | grep -E "(pyproject\.toml|src\/pipeliner\/.*.py)" | wc -l)
        echo "Number of changed files: $NUM_FILES"
        if ((NUM_FILES > 0)); then
          echo "Setting has_changes to true"
          echo "has_changes=true" >> "$GITHUB_OUTPUT"
        else
          echo "Setting has_changes to false"
          echo "has_changes=false" >> "$GITHUB_OUTPUT"
        fi

  tag_version:
    name: Tag Version
    runs-on: ubuntu-latest
    needs: [test, check_for_changes]
    if: github.ref == 'refs/heads/main' && needs.check_for_changes.outputs.has_changes == 'true'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.2.1
      with:
        versionSpec: '6.3.x'

    - name: Determine Version
      id: version_step # step id used as a reference for output values
      uses: gittools/actions/gitversion/execute@v3.2.1

    - run: |
        echo "FullSemVer (env.fullSemVer)            : ${{ env.fullSemVer }}"
      name: Display GitVersion variables (without prefix)

    - run: |
        echo "FullSemVer (env.GitVersion_FullSemVer) : ${{ env.GitVersion_FullSemVer }}"
      name: Display GitVersion variables (with prefix)

    - run: |
        echo "FullSemVer (steps.version_step.outputs.fullSemVer)            : ${{ steps.version_step.outputs.fullSemVer }}"
      name: Display GitVersion outputs (step output without prefix)

    - run: |
        echo "FullSemVer (steps.version_step.outputs.GitVersion_FullSemVer) : ${{ steps.version_step.outputs.GitVersion_FullSemVer }}"
      name: Display GitVersion outputs (step output with prefix)

    - run: |
        echo "FullSemVer (env.myvar_fullSemVer)            : ${{ env.myvar_fullSemVer }}"
      name: Display mapped local env (outputs without prefix)
      env:
        myvar_fullSemVer: ${{ steps.version_step.outputs.fullSemVer }}

    - run: |
        echo "FullSemVer (env.myvar_GitVersion_FullSemVer) : ${{ env.myvar_GitVersion_FullSemVer }}"
      name: Display mapped local env (outputs with prefix)
      env:
        myvar_GitVersion_FullSemVer: ${{ steps.version_step.outputs.GitVersion_FullSemVer }}

    - run: |
        echo "FullSemVer (env.myvar_fullSemVer)            : $env:myvar_fullSemVer"
      name: Display mapped local env (pwsh - outputs without prefix)
      shell: pwsh
      env:
        myvar_fullSemVer: ${{ steps.version_step.outputs.fullSemVer }}

    - run: |
        echo "FullSemVer (env.myvar_GitVersion_FullSemVer) : $env:myvar_GitVersion_FullSemVer"
      name: Display mapped local env (pwsh - outputs with prefix)
      shell: pwsh
      env:
        myvar_GitVersion_FullSemVer: ${{ steps.version_step.outputs.GitVersion_FullSemVer }}

    - run: |
        echo "FullSemVer (myvar_fullSemVer)            : $myvar_fullSemVer"
      name: Display mapped local env (bash - outputs without prefix)
      shell: bash
      env:
        myvar_fullSemVer: ${{ steps.version_step.outputs.fullSemVer }}

    - run: |
        echo "FullSemVer (myvar_GitVersion_FullSemVer) : $myvar_GitVersion_FullSemVer"
      name: Display mapped local env (bash - outputs with prefix)
      shell: bash
      env:
        myvar_GitVersion_FullSemVer: ${{ steps.version_step.outputs.GitVersion_FullSemVer }}

  build_and_publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: tag_version

    steps:

    - name: Result
      run: |
        echo "Has changes: $HAS_CHANGES"

    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Build distribution package
      run: uv build --no-cache
